//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FastFoodSystem.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.SqlClient;

    public partial class DatabaseEntities : DbContext
    {
        public DatabaseEntities()
            : base("name=DatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CashMovement> CashMovements { get; set; }
        public virtual DbSet<CategoryType> CategoryTypes { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Combo> Comboes { get; set; }
        public virtual DbSet<CompoundProduct> CompoundProducts { get; set; }
        public virtual DbSet<CompoundProductCombo> CompoundProductComboes { get; set; }
        public virtual DbSet<CompoundProductFoodInput> CompoundProductFoodInputs { get; set; }
        public virtual DbSet<FoodInput> FoodInputs { get; set; }
        public virtual DbSet<FoodInputCombo> FoodInputComboes { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Provider> Providers { get; set; }
        public virtual DbSet<Purchase> Purchases { get; set; }
        public virtual DbSet<PurchaseDetail> PurchaseDetails { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<SaleDetail> SaleDetails { get; set; }
        public virtual DbSet<SaleType> SaleTypes { get; set; }
        public virtual DbSet<SimpleProduct> SimpleProducts { get; set; }
        public virtual DbSet<SimpleProductCombo> SimpleProductComboes { get; set; }
        public virtual DbSet<UnitType> UnitTypes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ProductView> ProductViews { get; set; }
    
        [DbFunction("DatabaseEntities", "GetCashMovement")]
        public virtual IQueryable<GetCashMovement_Result> GetCashMovement(Nullable<long> login_id)
        {
            var login_idParameter = login_id.HasValue ?
                new ObjectParameter("login_id", login_id) :
                new ObjectParameter("login_id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCashMovement_Result>("[DatabaseEntities].[GetCashMovement](@login_id)", login_idParameter);
        }
    
        [DbFunction("DatabaseEntities", "GetPurchaseDetail")]
        public virtual IQueryable<GetPurchaseDetail_Result> GetPurchaseDetail(Nullable<System.DateTime> start_date, Nullable<System.DateTime> end_date)
        {
            var start_dateParameter = start_date.HasValue ?
                new ObjectParameter("start_date", start_date) :
                new ObjectParameter("start_date", typeof(System.DateTime));
    
            var end_dateParameter = end_date.HasValue ?
                new ObjectParameter("end_date", end_date) :
                new ObjectParameter("end_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPurchaseDetail_Result>("[DatabaseEntities].[GetPurchaseDetail](@start_date, @end_date)", start_dateParameter, end_dateParameter);
        }
    
        [DbFunction("DatabaseEntities", "GetPurchaseDetailByLogin")]
        public virtual IQueryable<GetPurchaseDetailByLogin_Result> GetPurchaseDetailByLogin(Nullable<long> login_id)
        {
            var login_idParameter = login_id.HasValue ?
                new ObjectParameter("login_id", login_id) :
                new ObjectParameter("login_id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPurchaseDetailByLogin_Result>("[DatabaseEntities].[GetPurchaseDetailByLogin](@login_id)", login_idParameter);
        }
    
        [DbFunction("DatabaseEntities", "GetSaleDetail")]
        public virtual IQueryable<GetSaleDetail_Result> GetSaleDetail(Nullable<System.DateTime> start_date, Nullable<System.DateTime> end_date)
        {
            var start_dateParameter = start_date.HasValue ?
                new ObjectParameter("start_date", start_date) :
                new ObjectParameter("start_date", typeof(System.DateTime));
    
            var end_dateParameter = end_date.HasValue ?
                new ObjectParameter("end_date", end_date) :
                new ObjectParameter("end_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSaleDetail_Result>("[DatabaseEntities].[GetSaleDetail](@start_date, @end_date)", start_dateParameter, end_dateParameter);
        }
    
        [DbFunction("DatabaseEntities", "GetSaleDetailByLogin")]
        public virtual IQueryable<GetSaleDetailByLogin_Result> GetSaleDetailByLogin(Nullable<long> login_id)
        {
            var login_idParameter = login_id.HasValue ?
                new ObjectParameter("login_id", login_id) :
                new ObjectParameter("login_id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSaleDetailByLogin_Result>("[DatabaseEntities].[GetSaleDetailByLogin](@login_id)", login_idParameter);
        }

        public ProductView[] GetProductView()
        {
            return this.Database.SqlQuery<ProductView>("SELECT * from dbo.ProductView").ToArray();
        }

        public decimal GetProductCost(int productId)
        {
            return this.Database.SqlQuery<decimal>(
                "SELECT dbo.GetProductCost(@someParameter)",
                new SqlParameter("someParameter", productId)
                ).First();
        }

        public int GetProductUnits(int productId)
        {
            return this.Database.SqlQuery<int>(
                "SELECT dbo.GetProductUnits(@someParameter)",
                new SqlParameter("someParameter", productId)
                ).First();
        }

        public string GetProductType(int productId)
        {
            return this.Database.SqlQuery<string>(
                "SELECT dbo.GetProductType(@someParameter)",
                new SqlParameter("someParameter", productId)
                ).First();
        }
    }
}
